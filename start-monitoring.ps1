# Script PowerShell pour d√©marrer la stack de monitoring
# Auteur: Assistant IA
# Description: Lance Prometheus, Grafana, Node Exporter et cAdvisor pour monitorer votre PC

Write-Host "===========================================" -ForegroundColor Cyan
Write-Host "   STACK DE MONITORING SYST√àME" -ForegroundColor Yellow
Write-Host "   Prometheus + Grafana + Node Exporter" -ForegroundColor Yellow
Write-Host "===========================================" -ForegroundColor Cyan
Write-Host ""

# V√©rification de Docker
Write-Host "üîç V√©rification de Docker..." -ForegroundColor Blue
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker d√©tect√©: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n'est pas install√© ou non accessible" -ForegroundColor Red
    Write-Host "   Veuillez installer Docker Desktop pour Windows" -ForegroundColor Yellow
    pause
    exit 1
}

# V√©rification de Docker Compose
try {
    $composeVersion = docker-compose --version
    Write-Host "‚úÖ Docker Compose d√©tect√©: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Compose n'est pas disponible" -ForegroundColor Red
    pause
    exit 1
}

Write-Host ""

# V√©rification des ports
Write-Host "üîç V√©rification des ports..." -ForegroundColor Blue
$ports = @(3000, 9090, 9100, 8081, 9093)
$portsInUse = @()

foreach ($port in $ports) {
    $connection = Test-NetConnection -ComputerName localhost -Port $port -WarningAction SilentlyContinue
    if ($connection.TcpTestSucceeded) {
        $portsInUse += $port
    }
}

if ($portsInUse.Count -gt 0) {
    Write-Host "‚ö†Ô∏è Ports d√©j√† utilis√©s: $($portsInUse -join ', ')" -ForegroundColor Yellow
    $response = Read-Host "Continuer quand m√™me ? (o/N)"
    if ($response -ne 'o' -and $response -ne 'O') {
        exit 1
    }
}

Write-Host ""

# D√©marrage de la stack
Write-Host "üöÄ D√©marrage de la stack de monitoring..." -ForegroundColor Blue
Write-Host ""

try {
    # Construction et d√©marrage des conteneurs
    docker-compose up -d
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Host "‚úÖ Stack d√©marr√©e avec succ√®s !" -ForegroundColor Green
        Write-Host ""
        
        # Attendre que les services soient pr√™ts
        Write-Host "‚è≥ Attente du d√©marrage des services..." -ForegroundColor Blue
        Start-Sleep -Seconds 10
        
        # Affichage du statut
        Write-Host "üìä Statut des conteneurs:" -ForegroundColor Cyan
        docker-compose ps
        
        Write-Host ""
        Write-Host "üåê ACC√àS AUX INTERFACES:" -ForegroundColor Yellow -BackgroundColor DarkBlue
        Write-Host ""
        Write-Host "   üîπ Grafana (Dashboard):    http://localhost:3000" -ForegroundColor White
        Write-Host "     Identifiants: admin / admin123" -ForegroundColor Gray
        Write-Host ""
        Write-Host "   üîπ Prometheus (M√©triques): http://localhost:9090" -ForegroundColor White
        Write-Host "   üîπ Node Exporter:          http://localhost:9100" -ForegroundColor White
        Write-Host "   üîπ cAdvisor (Conteneurs):  http://localhost:8081" -ForegroundColor White
        Write-Host "   üîπ AlertManager:           http://localhost:9093" -ForegroundColor White
        Write-Host ""
        
        # Proposer d'ouvrir Grafana
        $openGrafana = Read-Host "Ouvrir Grafana dans le navigateur ? (O/n)"
        if ($openGrafana -ne 'n' -and $openGrafana -ne 'N') {
            Start-Process "http://localhost:3000"
        }
        
        Write-Host ""
        Write-Host "üí° CONSEILS D'UTILISATION:" -ForegroundColor Cyan
        Write-Host "   ‚Ä¢ Le dashboard 'Monitoring Syst√®me PC' est automatiquement configur√©"
        Write-Host "   ‚Ä¢ Les alertes sont actives pour CPU > 80%, M√©moire > 85%, etc."
        Write-Host "   ‚Ä¢ Consultez le README.md pour plus d'informations"
        Write-Host ""
        Write-Host "üõë Pour arr√™ter la stack:"
        Write-Host "   docker-compose down" -ForegroundColor Yellow
        Write-Host ""
        
    } else {
        Write-Host "‚ùå Erreur lors du d√©marrage de la stack" -ForegroundColor Red
        Write-Host "V√©rifiez les logs avec: docker-compose logs" -ForegroundColor Yellow
    }
    
} catch {
    Write-Host "‚ùå Erreur: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "Appuyez sur une touche pour continuer..."
$host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown") | Out-Null 