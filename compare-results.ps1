# Script PowerShell - Comparaison des R√©sultats de Tests de Charge
# Analyse et compare les performances entre plusieurs tests

param(
    [string[]]$TestFiles = @(),
    [string]$OutputPath = "comparison-report.html"
)

Write-Host "üìä ANALYSEUR DE R√âSULTATS DE TESTS DE CHARGE" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan

if ($TestFiles.Count -eq 0) {
    # Auto-d√©couverte des fichiers de r√©sultats
    $TestFiles = Get-ChildItem -Path "." -Filter "*load-test-*.csv" | Select-Object -ExpandProperty Name
    $TestFiles += Get-ChildItem -Path "." -Filter "*stress-test-*.csv" | Select-Object -ExpandProperty Name
}

if ($TestFiles.Count -eq 0) {
    Write-Host "‚ùå Aucun fichier de r√©sultats trouv√©." -ForegroundColor Red
    Write-Host "üí° Ex√©cutez d'abord des tests de charge pour g√©n√©rer des donn√©es." -ForegroundColor Yellow
    exit 1
}

Write-Host "üìÅ Fichiers de r√©sultats trouv√©s: $($TestFiles.Count)" -ForegroundColor Green
foreach ($file in $TestFiles) {
    Write-Host "   üìÑ $file" -ForegroundColor White
}
Write-Host ""

# Structure pour stocker toutes les donn√©es
$AllResults = @()

# Lecture et parsing des fichiers CSV
foreach ($file in $TestFiles) {
    if (Test-Path $file) {
        try {
            $data = Import-Csv $file
            $fileInfo = Get-Item $file
            
            foreach ($row in $data) {
                $AllResults += [PSCustomObject]@{
                    FileName = $file
                    TestDate = $fileInfo.CreationTime
                    TestType = if ($file -like "*stress*") { "Stress" } else { "Load" }
                    Step = $row.Step
                    Users = [int]$row.Users
                    Duration = [double]$row.Duration
                    TotalRequests = [int]$row.TotalRequests
                    SuccessfulRequests = [int]$row.SuccessfulRequests
                    FailedRequests = [int]$row.FailedRequests
                    RPS = [double]$row.RPS
                    AvgResponseTime = [double]$row.AvgResponseTime
                    MinResponseTime = [double]$row.MinResponseTime
                    MaxResponseTime = [double]$row.MaxResponseTime
                    ErrorRate = [double]$row.ErrorRate
                }
            }
            
            Write-Host "‚úÖ Charg√©: $file ($($data.Count) enregistrements)" -ForegroundColor Green
        }
        catch {
            Write-Host "‚ö†Ô∏è  Erreur lors du chargement de $file : $($_.Exception.Message)" -ForegroundColor Yellow
        }
    }
}

if ($AllResults.Count -eq 0) {
    Write-Host "‚ùå Aucune donn√©e valide trouv√©e dans les fichiers." -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üìà ANALYSE DES PERFORMANCES" -ForegroundColor Cyan
Write-Host "============================" -ForegroundColor Cyan

# Analyse globale
$globalStats = $AllResults | Measure-Object -Property RPS, AvgResponseTime, ErrorRate -Average -Maximum -Minimum

Write-Host "üéØ Statistiques Globales:" -ForegroundColor Yellow
Write-Host "   RPS Moyen: $([math]::Round($globalStats[0].Average, 2)) (Min: $([math]::Round($globalStats[0].Minimum, 2)), Max: $([math]::Round($globalStats[0].Maximum, 2)))" -ForegroundColor White
Write-Host "   Temps de R√©ponse Moyen: $([math]::Round($globalStats[1].Average, 2))ms (Min: $([math]::Round($globalStats[1].Minimum, 2))ms, Max: $([math]::Round($globalStats[1].Maximum, 2))ms)" -ForegroundColor White
Write-Host "   Taux d'Erreur Moyen: $([math]::Round($globalStats[2].Average, 2))% (Min: $([math]::Round($globalStats[2].Minimum, 2))%, Max: $([math]::Round($globalStats[2].Maximum, 2))%)" -ForegroundColor White
Write-Host ""

# Analyse par type de test
$testTypes = $AllResults | Group-Object TestType

foreach ($testType in $testTypes) {
    Write-Host "üìä Tests de type '$($testType.Name)':" -ForegroundColor Cyan
    
    $typeStats = $testType.Group | Measure-Object -Property RPS, AvgResponseTime, ErrorRate -Average
    Write-Host "   Nombre de tests: $($testType.Count)" -ForegroundColor White
    Write-Host "   RPS Moyen: $([math]::Round($typeStats[0].Average, 2))" -ForegroundColor White
    Write-Host "   Temps Moyen: $([math]::Round($typeStats[1].Average, 2))ms" -ForegroundColor White
    Write-Host "   Erreurs Moyennes: $([math]::Round($typeStats[2].Average, 2))%" -ForegroundColor White
    Write-Host ""
}

# Top des meilleures performances
Write-Host "üèÜ TOP 5 - MEILLEURES PERFORMANCES (RPS)" -ForegroundColor Green
$topRPS = $AllResults | Sort-Object RPS -Descending | Select-Object -First 5
foreach ($result in $topRPS) {
    Write-Host "   $($result.RPS) req/s - $($result.Users) users - $($result.FileName)" -ForegroundColor White
}
Write-Host ""

# Top des temps de r√©ponse les plus rapides
Write-Host "‚ö° TOP 5 - TEMPS DE R√âPONSE LES PLUS RAPIDES" -ForegroundColor Green
$topSpeed = $AllResults | Sort-Object AvgResponseTime | Select-Object -First 5
foreach ($result in $topSpeed) {
    Write-Host "   $($result.AvgResponseTime)ms - $($result.Users) users - $($result.FileName)" -ForegroundColor White
}
Write-Host ""

# D√©tection des probl√®mes
Write-Host "üîç D√âTECTION DE PROBL√àMES" -ForegroundColor Red
$problems = $AllResults | Where-Object { $_.ErrorRate -gt 5 -or $_.AvgResponseTime -gt 1000 }

if ($problems.Count -gt 0) {
    Write-Host "‚ö†Ô∏è  $($problems.Count) tests probl√©matiques d√©tect√©s:" -ForegroundColor Red
    foreach ($problem in $problems) {
        $issues = @()
        if ($problem.ErrorRate -gt 5) { $issues += "Taux d'erreur √©lev√© ($($problem.ErrorRate)%)" }
        if ($problem.AvgResponseTime -gt 1000) { $issues += "Temps de r√©ponse lent ($($problem.AvgResponseTime)ms)" }
        
        Write-Host "   üìÑ $($problem.FileName) - $($problem.Users) users: $($issues -join ', ')" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚úÖ Aucun probl√®me majeur d√©tect√©!" -ForegroundColor Green
}
Write-Host ""

# Analyse de tendances
Write-Host "üìà ANALYSE DE TENDANCES" -ForegroundColor Cyan
Write-Host "========================" -ForegroundColor Cyan

# Tendance par nombre d'utilisateurs
$userGroups = $AllResults | Group-Object Users | Sort-Object Name

Write-Host "üìä Performance par nombre d'utilisateurs:" -ForegroundColor Yellow
foreach ($group in $userGroups) {
    $avgRPS = ($group.Group | Measure-Object RPS -Average).Average
    $avgTime = ($group.Group | Measure-Object AvgResponseTime -Average).Average
    $avgError = ($group.Group | Measure-Object ErrorRate -Average).Average
    
    Write-Host "   $($group.Name) users: $([math]::Round($avgRPS, 2)) req/s, $([math]::Round($avgTime, 2))ms, $([math]::Round($avgError, 2))% erreurs" -ForegroundColor White
}
Write-Host ""

# Recommandations
Write-Host "üéØ RECOMMANDATIONS" -ForegroundColor Magenta
Write-Host "==================" -ForegroundColor Magenta

$bestPerformance = $AllResults | Sort-Object RPS -Descending | Select-Object -First 1
$optimalUsers = $bestPerformance.Users * 0.7

Write-Host "üí° Recommandations bas√©es sur l'analyse:" -ForegroundColor Yellow
Write-Host "   üéØ Nombre optimal d'utilisateurs simultan√©s: $([math]::Round($optimalUsers, 0))" -ForegroundColor Green
Write-Host "   üìä RPS cible recommand√©: $([math]::Round($bestPerformance.RPS * 0.8, 2))" -ForegroundColor Green

if ($globalStats[2].Average -gt 1) {
    Write-Host "   ‚ö†Ô∏è  Optimisation n√©cessaire pour r√©duire le taux d'erreur" -ForegroundColor Red
}

if ($globalStats[1].Average -gt 500) {
    Write-Host "   ‚ö†Ô∏è  Optimisation des temps de r√©ponse recommand√©e" -ForegroundColor Red
}

# G√©n√©ration du rapport HTML
Write-Host ""
Write-Host "üìÑ G√âN√âRATION DU RAPPORT HTML" -ForegroundColor Cyan
Write-Host "==============================" -ForegroundColor Cyan

$htmlContent = @"
<!DOCTYPE html>
<html>
<head>
    <title>Rapport de Comparaison des Tests de Charge</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
        h2 { color: #34495e; margin-top: 30px; }
        .metric { display: inline-block; margin: 10px; padding: 15px; background: #ecf0f1; border-radius: 5px; min-width: 150px; text-align: center; }
        .metric-value { font-size: 24px; font-weight: bold; color: #2980b9; }
        .metric-label { font-size: 12px; color: #7f8c8d; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #3498db; color: white; }
        .good { color: #27ae60; font-weight: bold; }
        .warning { color: #f39c12; font-weight: bold; }
        .error { color: #e74c3c; font-weight: bold; }
        .chart { margin: 20px 0; padding: 20px; background: #f8f9fa; border-radius: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä Rapport de Comparaison des Tests de Charge</h1>
        <p><strong>G√©n√©r√© le:</strong> $(Get-Date -Format 'dd/MM/yyyy HH:mm:ss')</p>
        <p><strong>Nombre de tests analys√©s:</strong> $($AllResults.Count)</p>
        
        <h2>üéØ M√©triques Globales</h2>
        <div class="metric">
            <div class="metric-value">$([math]::Round($globalStats[0].Average, 2))</div>
            <div class="metric-label">RPS Moyen</div>
        </div>
        <div class="metric">
            <div class="metric-value">$([math]::Round($globalStats[1].Average, 2))ms</div>
            <div class="metric-label">Temps Moyen</div>
        </div>
        <div class="metric">
            <div class="metric-value">$([math]::Round($globalStats[2].Average, 2))%</div>
            <div class="metric-label">Taux d'Erreur</div>
        </div>
        
        <h2>üìà R√©sultats D√©taill√©s</h2>
        <table>
            <tr>
                <th>Fichier</th>
                <th>Date</th>
                <th>Type</th>
                <th>Utilisateurs</th>
                <th>RPS</th>
                <th>Temps Moyen</th>
                <th>Taux d'Erreur</th>
                <th>Status</th>
            </tr>
"@

foreach ($result in $AllResults | Sort-Object TestDate -Descending) {
    $status = "good"
    $statusText = "‚úÖ Bon"
    
    if ($result.ErrorRate -gt 5 -or $result.AvgResponseTime -gt 1000) {
        $status = "error"
        $statusText = "‚ùå Probl√®me"
    } elseif ($result.ErrorRate -gt 1 -or $result.AvgResponseTime -gt 500) {
        $status = "warning"
        $statusText = "‚ö†Ô∏è Attention"
    }
    
    $htmlContent += @"
            <tr>
                <td>$($result.FileName)</td>
                <td>$($result.TestDate.ToString('dd/MM HH:mm'))</td>
                <td>$($result.TestType)</td>
                <td>$($result.Users)</td>
                <td>$($result.RPS)</td>
                <td>$($result.AvgResponseTime)ms</td>
                <td>$($result.ErrorRate)%</td>
                <td class="$status">$statusText</td>
            </tr>
"@
}

$htmlContent += @"
        </table>
        
        <h2>üèÜ Top Performances</h2>
        <div class="chart">
            <h3>Meilleur RPS: $($topRPS[0].RPS) req/s</h3>
            <p>Obtenu avec $($topRPS[0].Users) utilisateurs dans $($topRPS[0].FileName)</p>
        </div>
        
        <h2>üéØ Recommandations</h2>
        <ul>
            <li><strong>Nombre optimal d'utilisateurs:</strong> $([math]::Round($optimalUsers, 0))</li>
            <li><strong>RPS cible:</strong> $([math]::Round($bestPerformance.RPS * 0.8, 2))</li>
            <li><strong>Seuil d'alerte temps de r√©ponse:</strong> 500ms</li>
            <li><strong>Seuil d'alerte taux d'erreur:</strong> 1%</li>
        </ul>
        
        <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #7f8c8d; text-align: center;">
            <p>G√©n√©r√© par l'Analyseur de Tests de Charge - MyDigitalSchool</p>
        </footer>
    </div>
</body>
</html>
"@

try {
    $htmlContent | Out-File -FilePath $OutputPath -Encoding UTF8
    Write-Host "‚úÖ Rapport HTML g√©n√©r√©: $OutputPath" -ForegroundColor Green
    
    # Tentative d'ouverture automatique
    if (Get-Command "start" -ErrorAction SilentlyContinue) {
        Start-Process $OutputPath
        Write-Host "üåê Rapport ouvert automatiquement dans le navigateur" -ForegroundColor Cyan
    }
}
catch {
    Write-Host "‚ùå Erreur lors de la g√©n√©ration du rapport: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéØ Analyse termin√©e avec succ√®s!" -ForegroundColor Magenta
Write-Host "üìä $($AllResults.Count) tests analys√©s dans $($TestFiles.Count) fichiers" -ForegroundColor White
Write-Host "üìÑ Rapport disponible: $OutputPath" -ForegroundColor White 