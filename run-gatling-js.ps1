#!/usr/bin/env pwsh

<#
.SYNOPSIS
Script PowerShell pour ex√©cuter les tests Gatling JavaScript universels

.DESCRIPTION
Ce script permet d'ex√©cuter facilement les tests de performance Gatling JavaScript
pour n'importe quelle URL avec des configurations personnalisables.

.PARAMETER TargetUrl
URL cible √† tester (d√©faut: http://localhost:3001)

.PARAMETER Endpoints
Liste des endpoints s√©par√©s par des virgules (d√©faut: /)

.PARAMETER HttpMethods
M√©thodes HTTP s√©par√©es par des virgules (d√©faut: GET)

.PARAMETER BaseUsers
Nombre d'utilisateurs de base (d√©faut: 5)

.PARAMETER MaxUsers
Nombre maximum d'utilisateurs (d√©faut: 50)

.PARAMETER TestDuration
Dur√©e du test en secondes (d√©faut: 60)

.PARAMETER EnableStress
Active le test de stress (d√©faut: false)

.PARAMETER Debug
Active le mode debug (d√©faut: false)

.PARAMETER Headers
Headers HTTP personnalis√©s au format JSON

.PARAMETER Setup
Installe les d√©pendances Gatling JS

.EXAMPLE
.\run-gatling-js.ps1 -TargetUrl "https://api.exemple.com" -Endpoints "/users,/products" -HttpMethods "GET,POST"

.EXAMPLE
.\run-gatling-js.ps1 -Setup

.EXAMPLE
.\run-gatling-js.ps1 -TargetUrl "http://localhost:3001" -EnableStress -Debug
#>

param(
    [string]$TargetUrl = "http://localhost:3001",
    [string]$Endpoints = "/",
    [string]$HttpMethods = "GET",
    [int]$BaseUsers = 5,
    [int]$MaxUsers = 50,
    [int]$TestDuration = 60,
    [int]$RampDuration = 30,
    [int]$ThinkTime = 1,
    [string]$Headers = "{}",
    [int]$RequestTimeout = 10000,
    [switch]$EnableStress,
    [switch]$Debug,
    [switch]$Setup,
    [switch]$Help
)

# Couleurs pour l'affichage
$RED = "`e[31m"
$GREEN = "`e[32m"
$YELLOW = "`e[33m"
$BLUE = "`e[34m"
$MAGENTA = "`e[35m"
$CYAN = "`e[36m"
$NC = "`e[0m" # No Color

function Write-ColoredOutput {
    param([string]$Message, [string]$Color = $NC)
    Write-Host "${Color}${Message}${NC}"
}

function Show-Help {
    Write-ColoredOutput "üöÄ Gatling JavaScript Universal Tester" $CYAN
    Write-ColoredOutput "=======================================" $CYAN
    Write-Host ""
    Write-ColoredOutput "UTILISATION:" $YELLOW
    Write-Host "  .\run-gatling-js.ps1 [OPTIONS]"
    Write-Host ""
    Write-ColoredOutput "OPTIONS PRINCIPALES:" $YELLOW
    Write-Host "  -TargetUrl <url>        URL cible √† tester"
    Write-Host "  -Endpoints <list>       Endpoints s√©par√©s par virgules"
    Write-Host "  -HttpMethods <list>     M√©thodes HTTP (GET,POST,PUT,DELETE,PATCH)"
    Write-Host "  -BaseUsers <number>     Nombre d'utilisateurs de base"
    Write-Host "  -MaxUsers <number>      Nombre maximum d'utilisateurs"
    Write-Host "  -TestDuration <sec>     Dur√©e du test en secondes"
    Write-Host "  -EnableStress           Active le test de stress"
    Write-Host "  -Debug                  Active le mode debug"
    Write-Host "  -Setup                  Installe les d√©pendances"
    Write-Host ""
    Write-ColoredOutput "EXEMPLES:" $YELLOW
    Write-Host "  # Test simple"
    Write-Host "  .\run-gatling-js.ps1 -TargetUrl 'https://api.exemple.com'"
    Write-Host ""
    Write-Host "  # Test multi-endpoints"
    Write-Host "  .\run-gatling-js.ps1 -TargetUrl 'http://localhost:3001' -Endpoints '/,/api/users,/api/products'"
    Write-Host ""
    Write-Host "  # Test de stress"
    Write-Host "  .\run-gatling-js.ps1 -TargetUrl 'http://localhost:3001' -EnableStress -MaxUsers 100"
    Write-Host ""
    Write-Host "  # Installation"
    Write-Host "  .\run-gatling-js.ps1 -Setup"
}

function Test-Prerequisites {
    Write-ColoredOutput "üîç V√©rification des pr√©requis..." $BLUE
    
    # V√©rifier Node.js
    try {
        $nodeVersion = node --version
        Write-ColoredOutput "‚úÖ Node.js d√©tect√©: $nodeVersion" $GREEN
    } catch {
        Write-ColoredOutput "‚ùå Node.js n'est pas install√©!" $RED
        Write-ColoredOutput "Installez Node.js depuis https://nodejs.org/" $YELLOW
        return $false
    }
    
    # V√©rifier npm
    try {
        $npmVersion = npm --version
        Write-ColoredOutput "‚úÖ npm d√©tect√©: $npmVersion" $GREEN
    } catch {
        Write-ColoredOutput "‚ùå npm n'est pas disponible!" $RED
        return $false
    }
    
    return $true
}

function Install-Dependencies {
    Write-ColoredOutput "üì¶ Installation des d√©pendances Gatling JavaScript..." $BLUE
    
    if (!(Test-Path "package.json")) {
        Write-ColoredOutput "‚ùå Fichier package.json non trouv√©!" $RED
        return $false
    }
    
    try {
        Write-ColoredOutput "Installation des packages npm..." $YELLOW
        npm install
        
        Write-ColoredOutput "Installation de Gatling CLI globalement..." $YELLOW
        npm install -g @gatling.io/cli
        
        Write-ColoredOutput "‚úÖ Installation termin√©e!" $GREEN
        return $true
    } catch {
        Write-ColoredOutput "‚ùå Erreur lors de l'installation: $_" $RED
        return $false
    }
}

function Test-TargetUrl {
    param([string]$Url)
    
    Write-ColoredOutput "üåê Test de connectivit√© vers $Url..." $BLUE
    
    try {
        $response = Invoke-WebRequest -Uri $Url -Method HEAD -TimeoutSec 10 -UseBasicParsing
        Write-ColoredOutput "‚úÖ URL accessible (Status: $($response.StatusCode))" $GREEN
        return $true
    } catch {
        Write-ColoredOutput "‚ö†Ô∏è  URL non accessible ou timeout: $_" $YELLOW
        Write-ColoredOutput "Le test continuera quand m√™me..." $YELLOW
        return $true # On continue m√™me si l'URL n'est pas accessible
    }
}

function Start-GatlingTest {
    Write-ColoredOutput "üöÄ D√©marrage du test Gatling JavaScript..." $CYAN
    Write-ColoredOutput "=========================================" $CYAN
    
    # Configuration des variables d'environnement
    $env:TARGET_URL = $TargetUrl
    $env:ENDPOINTS = $Endpoints
    $env:HTTP_METHODS = $HttpMethods
    $env:BASE_USERS = $BaseUsers.ToString()
    $env:MAX_USERS = $MaxUsers.ToString()
    $env:TEST_DURATION = $TestDuration.ToString()
    $env:RAMP_DURATION = $RampDuration.ToString()
    $env:THINK_TIME = $ThinkTime.ToString()
    $env:HEADERS = $Headers
    $env:REQUEST_TIMEOUT = $RequestTimeout.ToString()
    $env:ENABLE_STRESS = if ($EnableStress) { "true" } else { "false" }
    $env:DEBUG = if ($Debug) { "true" } else { "false" }
    
    Write-ColoredOutput "Configuration du test:" $YELLOW
    Write-Host "  URL cible: $TargetUrl"
    Write-Host "  Endpoints: $Endpoints"
    Write-Host "  M√©thodes HTTP: $HttpMethods"
    Write-Host "  Utilisateurs base/max: $BaseUsers/$MaxUsers"
    Write-Host "  Dur√©e: $TestDuration secondes"
    Write-Host "  Test de stress: $(if ($EnableStress) { 'Activ√©' } else { 'D√©sactiv√©' })"
    Write-Host "  Mode debug: $(if ($Debug) { 'Activ√©' } else { 'D√©sactiv√©' })"
    Write-Host ""
    
    $startTime = Get-Date
    Write-ColoredOutput "‚è±Ô∏è  D√©but du test: $($startTime.ToString('yyyy-MM-dd HH:mm:ss'))" $BLUE
    
    try {
        # Ex√©cution du test Gatling
        gatling run --simulation gatling-js-universal-test.js
        
        $endTime = Get-Date
        $duration = $endTime - $startTime
        
        Write-ColoredOutput "‚úÖ Test termin√© avec succ√®s!" $GREEN
        Write-ColoredOutput "‚è±Ô∏è  Dur√©e totale: $($duration.ToString('mm\:ss'))" $BLUE
        
        # Recherche du r√©pertoire de r√©sultats
        $resultsDir = Get-ChildItem -Path "results" -Directory | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        if ($resultsDir) {
            $reportPath = Join-Path $resultsDir.FullName "index.html"
            if (Test-Path $reportPath) {
                Write-ColoredOutput "üìä Rapport disponible: $reportPath" $CYAN
                Write-ColoredOutput "üí° Ouvrir le rapport: start '$reportPath'" $YELLOW
            }
        }
        
    } catch {
        Write-ColoredOutput "‚ùå Erreur lors de l'ex√©cution: $_" $RED
        return $false
    }
    
    return $true
}

function Show-Summary {
    Write-ColoredOutput "`nüìã R√âSUM√â DU TEST" $CYAN
    Write-ColoredOutput "=================" $CYAN
    Write-Host "  URL test√©e: $TargetUrl"
    Write-Host "  Endpoints: $Endpoints"
    Write-Host "  M√©thodes: $HttpMethods"
    Write-Host "  Charge: $BaseUsers ‚Üí $MaxUsers utilisateurs"
    Write-Host "  Dur√©e: $TestDuration secondes"
    Write-Host "  Stress test: $(if ($EnableStress) { 'Oui' } else { 'Non' })"
    Write-Host ""
    Write-ColoredOutput "üí° Conseils:" $YELLOW
    Write-Host "  ‚Ä¢ Analysez le rapport HTML g√©n√©r√©"
    Write-Host "  ‚Ä¢ V√©rifiez les temps de r√©ponse et taux d'erreur"
    Write-Host "  ‚Ä¢ Ajustez les param√®tres selon les r√©sultats"
    Write-Host "  ‚Ä¢ Utilisez -Debug pour plus de d√©tails"
}

# ============================================================================
# SCRIPT PRINCIPAL
# ============================================================================

if ($Help) {
    Show-Help
    exit 0
}

Write-ColoredOutput "üöÄ Gatling JavaScript Universal Tester" $CYAN
Write-ColoredOutput "=======================================" $CYAN

# V√©rification des pr√©requis
if (!(Test-Prerequisites)) {
    exit 1
}

# Installation si demand√©e
if ($Setup) {
    if (Install-Dependencies) {
        Write-ColoredOutput "`n‚úÖ Installation termin√©e! Vous pouvez maintenant lancer des tests." $GREEN
        Show-Help
    } else {
        Write-ColoredOutput "`n‚ùå √âchec de l'installation." $RED
        exit 1
    }
    exit 0
}

# V√©rification de l'existence du script de test
if (!(Test-Path "gatling-js-universal-test.js")) {
    Write-ColoredOutput "‚ùå Script de test 'gatling-js-universal-test.js' non trouv√©!" $RED
    Write-ColoredOutput "Assurez-vous d'√™tre dans le bon r√©pertoire." $YELLOW
    exit 1
}

# Test de connectivit√©
Test-TargetUrl -Url $TargetUrl

# D√©marrage du test
if (Start-GatlingTest) {
    Show-Summary
    Write-ColoredOutput "`nüéâ Test termin√© avec succ√®s!" $GREEN
} else {
    Write-ColoredOutput "`n‚ùå Le test a √©chou√©." $RED
    exit 1
} 